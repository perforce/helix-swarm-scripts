#!/bin/bash
#
# Get list of reviews
#

if [ -x perforce-utils ]
then
    . ./perforce-utils
elif [ -x $(dirname $0)/perforce-utils ]
then
    . $(dirname $0)/perforce-utils
elif [ -x /usr/local/bin/perforce-utils ]
then
    . ./usr/local/bin/perforce-utils
else
    echo "Unable to find perforce-utils file"
    exit 2
fi


JSON=0
COUNT=0
VERBOSE=0


function usage() {
    echo "Usage: swarm-reviews [<options>]"
    echo ""
    echo "Returns a list of the review ids according to the given filters"
    echo "Reads P4USER from the environment if a user isn't passed"
    echo ""
    echo "  -u <userid>  User to use"
    echo "  -p <p4port>  P4PORT to use"
    echo "  -P <pw>      Password to use"
    echo "  -j           Return raw json for the review data"
    echo "  -c           Only return a count of the number of reviews"
    echo "  -N           Only include reviews that need review"
    echo "  -A           Only include reviews that are approved"
    echo "  -O           Only include reviews in an open state"
    echo "  -C           Only include reviews in a closed state"
    echo "  -M           Also return review metadata"
    echo "  -R <id>      Get data for a single review"
    echo "  -h           This message"
}

PARAMS=""
MAX=50

while getopts "u:p:P:m:NAOCMjchvR:" opt
do
    case $opt in
        h)
            usage
            exit 0
            ;;
        u)
            P4USER=$OPTARG
            ;;
        p)
            P4PORT=$OPTARG
            ;;
        P)
            PASSWD=$OPTARG
            ;;
        j)
            JSON=1
            ;;
        c)
            COUNT=1
            ;;
        v)
            VERBOSE=1
            ;;
        m)
            MAX=$OPTARG
            ;;
        N)
            PARAMS="${PARAMS}&state=needsReview"
            ;;
        A)
            PARAMS="${PARAMS}&state=approved"
            ;;
        O)
            PARAMS="${PARAMS}&state[]=approved:isPending&state[]=needsReview&state[]=needsRevision"
            ;;
        C)
            PARAMS="${PARAMS}&state[]=approved:notPending&state[]=rejected&state[]=archived"
            ;;
        M)
            PARAMS="${PARAMS}&metadata=true"
            ;;
        R)
            REVIEWID=$OPTARG
            ;;
        :)
            echo "Missing an argument"
            ;;
        \?)
            echo "I don't know \"-$OPTARG\""
            usage
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))

PARAMS="?max=${MAX}$PARAMS"
P4="p4 -p $P4PORT -u $P4USER"

#Login
p4login
url=$($P4 property -l -n P4.Swarm.URL | sed 's/.* = //')

# Generate a ticket
ticket="$P4USER:$(p4ticket)"

if [ ! -z $REVIEWID ]
then
    if [ $JSON -eq 1 ]
    then
        curl -s -u "$ticket" "$url/api/v11/reviews/$REVIEWID$PARAMS"
        echo
    else
        curl -s -u "$ticket" "$url/api/v11/reviews/$REVIEWID$PARAMS" | jq
    fi
elif [ $COUNT -eq 1 ]
then
    curl -s -u "$ticket" "$url/api/v11/reviews$PARAMS" | jq '.data.totalCount'
elif [ $JSON -eq 1 ]
then
    curl -s -u "$ticket" "$url/api/v11/reviews$PARAMS"
    echo
elif [ $VERBOSE -eq 1 ]
then
    curl -s -u "$ticket" "$url/api/v11/reviews$PARAMS" | jq -r '.data.reviews[] | "\(.id) \(.author) \(.stateLabel)"' | sed 's/(.*)//g'    
else
    curl -s -u "$ticket" "$url/api/v11/reviews$PARAMS" | jq '.data.reviews[].id'
fi

exit 0
